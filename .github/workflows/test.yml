name: Tests

on:
  workflow_dispatch:  # Manual trigger only
  # push:
  #   branches: [ main, develop, Result-Verification-Agent ]
  # pull_request:
  #   branches: [ main, develop ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.11', '3.12', '3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests with pytest
      run: |
        python -m pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-report=html \
          --junitxml=test-results.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
          coverage.xml

    - name: Archive coverage HTML report
      uses: actions/upload-artifact@v4
      if: matrix.python-version == '3.13'
      with:
        name: coverage-report
        path: htmlcov/

    - name: Check coverage threshold
      run: |
        coverage report --fail-under=45

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request' && matrix.python-version == '3.13'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 60
        MINIMUM_ORANGE: 45

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run flake8
      run: |
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
      continue-on-error: true

    - name: Run black (check only)
      run: |
        black --check src/ tests/
      continue-on-error: true

    - name: Run isort (check only)
      run: |
        isort --check-only src/ tests/
      continue-on-error: true

    - name: Run mypy
      run: |
        mypy src/ --ignore-missing-imports
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
      continue-on-error: true

    - name: Upload safety results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-report
        path: safety-report.json

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()

    steps:
    - name: Check test results
      run: |
        echo "Test job status: ${{ needs.test.result }}"
        echo "Lint job status: ${{ needs.lint.result }}"
        echo "Security job status: ${{ needs.security.result }}"

        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "❌ Tests failed!"
          exit 1
        fi

        echo "✅ All checks passed!"
